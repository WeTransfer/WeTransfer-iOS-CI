---
format_version: '8'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
trigger_map:
- pull_request_source_branch: "*"
  workflow: wetransfer_pr_testing
workflows:
  wetransfer_pr_testing:
    steps:
    - cache-pull: {}
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            if [ ! -d "Submodules/WeTransfer-iOS-CI" ] ; then
              # file does not exist - simply exit with success
              exit 0
            fi

            # Get the latest master branch for WeTransfer-iOS-CI if the submodule exists
            git submodule update --remote --no-fetch Submodules/WeTransfer-iOS-CI
        title: Update WeTransfer-iOS-CI submodule
    - script:
        title: Force SSH
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # As we work with submodules, make sure we use SSH for this config so we can push our PR later on.
            # See for more info: https://discuss.bitrise.io/t/git-force-to-use-ssh-url-instead-of-https-for-github-com/4384
            git config --global url."git@github.com:".insteadOf "https://github.com/"
    - script:
        title: Set GEM_CACHE_PATH env var
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            RBENV_DIR="`cd $(rbenv which ruby)/../..;pwd`"
            echo "Gem cache directory: $RBENV_DIR"
            envman add --key GEM_CACHE_PATH --value $RBENV_DIR
    - bitrise-step-install-bundler: {}
    - script:
        title: Run Fastlane
        inputs:
        - content: |-
            #!/usr/bin/env bash
            bundle update
            bundle exec fastlane unhide_spm_package_dev_dependencies
            # Use the environment FASTLANE_LANE if available. Otherwise, fallback to "test"
            lane=${FASTLANE_LANE:=test}
            bundle exec fastlane $lane
    - script:
        title: Install Danger
        inputs:
        - content: |-
            # Install the following command
            npm install -g danger
    - brew-install@0:
        inputs:
        - upgrade: 'no'
        - packages: swiftlint
        - cache_enabled: 'yes'
        title: Install SwiftLint
    - script:
        title: Run Danger
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # debug log
            set -x

            swift build
            swift run danger-swift ci
    - cache-push:
        run_if: true
        inputs:
        - cache_paths: |
            $BITRISE_CACHE_DIR
            .build
            ~/.danger-swift
            SourcePackages

            $GEM_CACHE_PATH
