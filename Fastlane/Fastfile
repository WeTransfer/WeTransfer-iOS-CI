# rubocop:disable LineLength

require "uri"

desc 'Runs tests for a specific package'
lane :test_package do |options|
	reports_dir = "#{ENV['PWD']}/build/reports"

	begin
		ENV["XCPRETTY_JSON_FILE_OUTPUT"] = "#{reports_dir}/#{options[:package_name]}_Tests.json"
		destination = 'platform=iOS Simulator,name=iPhone 11,OS=14.2'
		sourcePackagesDir = "#{ENV['PWD']}/SourcePackages"

	    sh "cd #{ENV['PWD']}/#{options[:package_path]} && xcodebuild -scheme #{options[:package_name]} -destination '#{destination}' -resultBundlePath '#{reports_dir}/#{options[:package_name]}.xcresult' -disable-concurrent-testing -enableCodeCoverage YES -UseNewBuildSystem=YES -clonedSourcePackagesDirPath #{sourcePackagesDir} build test | xcpretty -f `xcpretty-json-formatter`"
	rescue => ex
		UI.important("Tests failed for #{ex}")
	end
end

desc 'Runs tests for an external project'
lane :test_project do |options|
	clear_derived_data

	# Set timeout to prevent xcodebuild -list -project to take to much retries.
	ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"

	begin
		ENV["XCPRETTY_JSON_FILE_OUTPUT"] = "build/reports/#{options[:scheme]}_Tests.json"
		source_dir = ENV['BITRISE_SOURCE_DIR'] || '.'
		device = options[:device] || "iPhone 11"
		scan(
		  scheme: options[:scheme],
		  project: "#{options[:project_path]}#{options[:project_name]}.xcodeproj",
		  device: device,
		  destination: options[:destination],
		  code_coverage: true,
		  disable_concurrent_testing: true,
		  fail_build: false,
		  skip_slack: true,
		  output_types: "",
		  prelaunch_simulator: true,
		  xcargs: "-UseNewBuildSystem=YES",
		  include_simulator_logs: false, # Needed for this: https://github.com/fastlane/fastlane/issues/8909
		  formatter: "xcpretty-json-formatter",
		  result_bundle: true,
		  output_directory: "build/reports/",
		  cloned_source_packages_path: "SourcePackages"
		)
	rescue => ex
		UI.important("Tests failed for #{ex}")
	end
end

desc 'Tests the WeTransferPRLinter Swift Package'
lane :test_pr_linter do |options|
	spm(command: "generate-xcodeproj", package_path: "Danger-Swift")
	test_project(
		project_path: "Danger-Swift/", 
		project_name: "WeTransferPRLinter", 
		scheme: "WeTransferPRLinter-Package",
		device: nil,
		destination: "platform=macOS")
end

desc 'Create a release from a tag triggered CI run'
lane :release_from_tag do |options|
	# Get the latest tag, which is the new release that triggered this lane.
	sh('git fetch --tags origin master --no-recurse-submodules -q')

	latest_tag = ENV["BITRISE_GIT_TAG"]
	
	# Create a release branch
	sh "git branch release/#{latest_tag} origin/master"
    sh "git checkout release/#{latest_tag}"
    sh "git merge -X theirs #{latest_tag}"

	release_output = sh('gitbuddy release -c "../Changelog.md"')
	release_url = URI.extract(release_output).find { |url| url.include? 'releases/tag' }
    puts "Created release with URL: #{release_url}"

	# Run only if there's a podspec to update
	if Dir['../*.podspec'].any?
		# Update the podspec. It finds the .podspec automatically in the current folder.
		version_bump_podspec(version_number: latest_tag)
		
		begin
			# Push the podspec to trunk
			pod_push
		rescue => ex
			UI.important("Pod push failed: #{ex}")
		end
	end 

	# Push the changes to the branch
	sh('git commit -a -m "Created a new release"')
    sh("git push origin release/#{latest_tag}")
	
	# Create a PR
    # Create a pull request for master to include the updated Changelog.md and podspec
    create_pull_request(
      api_token: ENV["DANGER_GITHUB_API_TOKEN"],
      repo: git_repository_name,
      title: "Merge release #{latest_tag} into master",
      base: "master", # The branch to merge the changes into.
      body: "Containing all the changes for our [**#{latest_tag} Release**](#{release_url})."
    )
end

desc "Unhide dev dependencies for danger"
lane :unhide_spm_package_dev_dependencies do 
	text = File.read('../Package.swift')
	new_contents = text.gsub('// dev ', "")

	# To write changes to the file, use:
	File.open('../Package.swift', "w") {|file| file.puts new_contents }
end

desc "Returns the repository name. E.g: WeTransfer/Mocker"
lane :git_repository_name do
	sh("git remote show origin -n | grep h.URL | sed 's/.*://;s/.git$//'").strip
end

desc "Get latest Coyote release from Github. Draft releases and prereleases are not returned by this endpoint. See: https://developer.github.com/v3/repos/releases/#get-the-latest-release"
lane :latest_github_release do
	origin_name = git_repository_name.split('/')
	organisation = origin_name[0]
	repository = origin_name[1]

	result = github_api(
		server_url: "https://api.github.com",
		api_token: ENV["DANGER_GITHUB_API_TOKEN"],
		http_method: "GET",
		path: "/repos/#{organisation}/#{repository}/releases/latest"
	)

	puts "Latest Github release is #{result[:json]["tag_name"]}"
	result[:json]["tag_name"]
end
